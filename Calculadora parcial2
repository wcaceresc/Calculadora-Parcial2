#include <stdint.h>
#include "stm32l053xx.h"

void init();
void ky_filas(); //ESTA FUNCION ES PARA RECORRER LAS FILAS
void ky_col();   //ESTA FUNCION ES PARA RECORRER LAS COLUMNAS
void disp7(uint8_t); //ESTA FUNCION GUARDARA EL NUMERO PARA LUEGO RECORRER Y MOSTRAR EL NUMERO CORRESPONDIENTE
void delayMs(int n);

//uint16_t last_number = 0;
// DEFINICION DE LAS SUBMASCARAS SE ME HACE MAS FACIL VERLO CON LETRAS
#define FILA_1 (0x20)
#define FILA_2 (0x40)
#define FILA_3 (0x100)
#define FILA_4 (0x200)

uint8_t val = 0; //VARIABLE QUE GUARDARA VALORES TEMPORALES EN LOS RECORRIDOS


/////ESTAS VARIABLES TEMPORALES GUARDARAN LOS DATOS PARA LAS OPERACIONES MATEMATICAS
uint8_t digito1 = 0;
uint8_t digito2 = 0;
uint8_t suma = 0;
uint8_t temp1 = 0;
uint8_t temp2 = 0;

void init();

       //Variable temporal para guardar numero presionado
       uint8_t btn_press = 0;

int main(void)
 {
   init();
   while(1)
       {
   	     ky_filas();
	     ky_col();
	   }
 }

void init()

   {
    //HABILITA LOS CLOCKS DE A,B Y C RESPECTIVAMENTE
	  RCC->IOPENR |=0x01<<0;
	  RCC->IOPENR |=0x01<<1;
	  RCC->IOPENR |=0x01<<2;

    //PUERTOS QUE SE VAN A USAR PARA CADA SEGMENTO
       GPIOB->MODER &=~(1<<17);	//PB8 A
	   GPIOB->MODER &=~(1<<5);	//PB2 B
	   GPIOB->MODER &=~(1<<7);	//PB3 C
	   GPIOB->MODER &=~(1<<9);	//PB4 D
	   GPIOB->MODER &=~(1<<13);	//PB6 E
	   GPIOB->MODER &=~(1<<15);	//PB7 F
	   GPIOB->MODER &=~(1<<19);	//PB9 G


   // COMUN Y LIMPIA EL PUERTO PA1 QUE FUE EL QUE USE
	   GPIOA->MODER &=~(1<<3);
	   GPIOA->BSRR = (0x03<<16);

}
void ky_filas(){

	//Filas como IN pull up PC5, PC6, PC7, PC8.

	GPIOC->MODER &=~(1<<10);
	GPIOC->MODER &=~(1<<11);
	GPIOC->PUPDR |=(1<<10);

	GPIOC->MODER &=~(1<<12);
	GPIOC->MODER &=~(1<<13);
	GPIOC->PUPDR |=(1<<12);

	GPIOC->MODER &=~(1<<16);
	GPIOC->MODER &=~(1<<17);
	GPIOC->PUPDR |=(1<<16);

	GPIOC->MODER &=~(1<<18);
	GPIOC->MODER &=~(1<<19);
	GPIOC->PUPDR |=(1<<18);

	//Columnas como OUT PB11,PC7,PA9,PC4.

	GPIOB->MODER &=~(1<<23);
	GPIOC->MODER &=~(1<<15);
	GPIOA->MODER &=~(1<<19);
	GPIOC->MODER &=~(1<<9);
}

void ky_col() // Recorrera las columans 1,2,3,4.

     {
    	  //COL 1 (1-4-7-*)
	      GPIOB->ODR &=~(1<<11);
	      GPIOC->ODR |=(1<<7);
	      GPIOA->ODR |=(1<<9);
	      GPIOC->ODR |=(1<<4);
	      delayMs(5);

	         if(!(GPIOC->IDR & FILA_1))
	         {

	        	disp7(0x01);
            	digito1=1;
                digito2=1;
	         }
	             else if(!(GPIOC->IDR & FILA_2))
	                   {

	            	    disp7(0x04);
		                digito1=4;
                        digito2=4;
	                   }
	                   else if(!(GPIOC->IDR & FILA_3))
	                         {

	                	      disp7(0x07);
		                      digito1=7;
                              digito2=7;

	                         }
	                         else if(!(GPIOC->IDR & FILA_4))
	                         {
                              temp1=digito1;
	                          disp7(0xFF);
	                         }
    //COL2 (2-5-8-0)
	GPIOB->ODR |=(1<<11);
	GPIOC->ODR &=~(1<<7);
	GPIOA->ODR |=(1<<9);
	GPIOC->ODR |=(1<<4);
	delayMs(5);

	          if(!(GPIOC->IDR & FILA_1))
	            {
            	 disp7(0x02);
		         digito1=2;
	             digito2=2;
                }
	             else if(!(GPIOC->IDR & FILA_2))
	                    {
		  			     disp7(0x05);
    	                 digito1=5;
		                 digito2=5;

		                }
	                    else if(!(GPIOC->IDR & FILA_3))
	                           {
		   		                disp7(0x08);
    	                        digito1=8;
		                        digito2=8;

			                   }
	                            else if(!(GPIOC->IDR & FILA_4))
	                                   {
                                        disp7(0x00);
		                                digito1=0;
		                                digito2=0;

	                                   }
    //COL3 (3-6-9-#)
	GPIOB->ODR |=(1<<11);
	GPIOC->ODR |=(1<<7);
	GPIOA->ODR &=~(1<<9);
	GPIOC->ODR |=(1<<4);
	delayMs(5);

	if(!(GPIOC->IDR & FILA_1))
	  {
		disp7(0x03);
        digito1=3;
        digito2=3;

	  }
	       else if(!(GPIOC->IDR & FILA_2))
	              {
                   disp7(0x06);
	               digito1=6;
	               digito2=6;

			      }
	              else if(!(GPIOC->IDR & FILA_3))
	                     {
	            		  disp7(0x09);
		                  digito1=9;
		                  digito2=9;

		                 }
	                     else if(!(GPIOC->IDR & FILA_4))
	                            {
	                    	     temp2=digito2;
	                    	     disp7(0xFF);
		                   	    }
    //COL4 (A = + ,B = - ,C = * ,D = /)
	GPIOB->ODR |=(1<<11);
	GPIOC->ODR |=(1<<7);
	GPIOA->ODR |=(1<<9);
	GPIOC->ODR &=~(1<<4);
	delayMs(5);
///////////////////////// SUMA    //////////////////////////////////////////////////////////////////////////////////////
	                  if(!(GPIOC->IDR & FILA_1))
                         {
                          suma=temp1+temp2;
	                	  if (suma <= 9)
	                	  {
	                		disp7(suma);
	                		GPIOA->ODR |=(1<<1);
	                		delayMs(5);
	                	  }
	                	  else {
	                		  disp7(0x0E);
	                		  delayMs(5);
	                	       }
/////////////////////////   RESTA   /////////////////////////////////////////////////////////////////////////////////////
		                 }
	                      else if(!(GPIOC->IDR & FILA_2))
	                             {
                                  suma=(temp1-temp2);

                                  if (temp2 > temp1)
                                  {
                                	  suma=suma*-1;
                                	  disp7(0x0B);
                                	  disp7(suma);


                                  }
                                  else if (temp2 < temp1)
                                  {
                                	  disp7(suma);

                                  }



	                             }

////////////////////////   MULTIPLICACION  //////////////////////////////////////////////////////////////////////////////
	                          	 else if(!(GPIOC->IDR & FILA_3))
	                                    {
                                         suma=temp1*temp2;
                                         if (suma <= 9)
                                         {
		                           		 disp7(suma);
                                         GPIOA->ODR |=(1<<1);
		                                 delayMs(5);
                                         }
                                         else {
                                         disp7(0x0E);
                                         delayMs(5);
                                         }
		                              	}

////////////////////////   DIVISION   /////////////////////////////////////////////////////////////////////////////////
	                                    else if(!(GPIOC->IDR & FILA_4))
	                                           {
	                                    	    suma=temp1/temp2;

	                                    	    if (temp2 == 0)
	                                    	    {

	                                    	      disp7(0x0F);
	                                    	    }

	                                    	    else if(suma > 0 )
	                                    	    {
	                                    	    disp7(suma);
	                                    	    }

	                                    	    else if(suma>1)
	                                    	    {

	                                    	    disp7(0x0C);
		                                        GPIOA->ODR &=~(1<<1);
		                                        delayMs(5);
	                                    	    }
	                                    	  }
} //Fin de ky_col


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void disp7(uint8_t val)
{
	   btn_press = val;
	   GPIOB->BSRR = (0x3DC << 16); // RESETEA TODOS LOS BITS A 0

	//Maquina de estados para el despliegue de los numeros o letras
	     switch (val)
	        {


	        case 0x00:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 7;
	            break;
	        case 0x01:
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            break;
	        case 0x02:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 9;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 4;
	            break;
	        case 0x03:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 9;
	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            break;
	        case 0x04:
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 9;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            break;
	        case 0x05:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 9;
	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            break;
	        case 0x06:
	        	GPIOB->ODR |= 0x01 << 8;
	        	GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 9;
	            break;
	        case 0x07:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            break;
	        case 0x08:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 9;
	            break;
	        case 0x09:
	            GPIOB->ODR |= 0x01 << 9;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 2;
	            GPIOB->ODR |= 0x01 << 3;
	            break;

	        case 0x0E:
	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 9;
	            break;

	        case 0x0C:
	       	    //GPIOB->ODR |= 0x01 << 8;
	       	    //GPIOB->ODR |= 0x01 << 4;
	       	    //GPIOB->ODR |= 0x01 << 7;
	       	    //GPIOB->ODR |= 0x01 << 6;
	       	    GPIOB->ODR |= 0x01 << 9;
	       	    break;

	        case 0x0F:

	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 9;
	            delayMs(500);

	            GPIOB->ODR &= ~0x01 << 3;
	            GPIOB->ODR &= ~0x01 << 4;
	            GPIOB->ODR &= ~0x01 << 6;
	            GPIOB->ODR &= ~0x01 << 7;
	            GPIOB->ODR &= ~0x01 << 9;
	            delayMs(5);


	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 9;
	            delayMs(500);

	            GPIOB->ODR &= ~0x01 << 3;
	            GPIOB->ODR &= ~0x01 << 4;
	            GPIOB->ODR &= ~0x01 << 6;
	            GPIOB->ODR &= ~0x01 << 9;
	            delayMs(5);


	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 9;
	            delayMs(500);

	            GPIOB->ODR &= ~0x01 << 3;
	            GPIOB->ODR &= ~0x01 << 4;
	            GPIOB->ODR &= ~0x01 << 6;
	            GPIOB->ODR &= ~0x01 << 7;
	            GPIOB->ODR &= ~0x01 << 9;
	            delayMs(5);

	            GPIOB->ODR |= 0x01 << 3;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 9;
	            delayMs(500);

	            GPIOB->ODR &= ~0x01 << 3;
	            GPIOB->ODR &= ~0x01 << 4;
	            GPIOB->ODR &= ~0x01 << 6;
	            GPIOB->ODR &= ~0x01 << 9;
	            delayMs(500);


	            GPIOB->ODR |= 0x01 << 8;
	            GPIOB->ODR |= 0x01 << 4;
	            GPIOB->ODR |= 0x01 << 7;
	            GPIOB->ODR |= 0x01 << 6;
	            GPIOB->ODR |= 0x01 << 9;
	            break;

	        case 0x0B:
        	 	GPIOB->ODR |= 0x01 << 9;
        	 	delayMs(500);
  	        	break;

	        }
	}

	void delayMs(int n)

	   {
		int i = 0;
		 while (n > 0)
		   {
		    n--;
		    i = 0;
		     while (i < 240)
		       {
		        i++;
	      	   }
		   }
	   }
